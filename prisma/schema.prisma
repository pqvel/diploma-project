// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  Admin
  User
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?    
  emailVerified DateTime?
  image         String?
  roles         Roles[]   @default([User])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Chapter {
  id Int @id @default(autoincrement())
  slug String @unique
  title String @unique
  lessons Lesson[]
  active Boolean @default(false)
}

model Lesson {
  id Int @id @default(autoincrement())
  chapter Chapter @relation(fields: [chapterId], references: [id])
  chapterId Int
  title String
  slug String @unique
  active Boolean @default(false)
  // content
  lectures Lecture[]
  tests Test[]
}

model Lecture {
  id       Int    @id @default(autoincrement())
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId Int
  content  String @db.Text()
  order    Int
  type TypeContent @default(Lecture)
}

model Test {
  id        Int       @id @default(autoincrement())
  order Int 
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete:  Cascade)
  lessonId Int
  title      String @default("")
  description String @default("")
  type TypeContent @default(Test)
  typeTest TypeTest @default(One)
  answers Answer[] 
  correctAnswerId   Int?      @unique
  correctAnswer     Answer?   @relation("CorrectAnswer", fields: [correctAnswerId], references: [id], onDelete: Cascade)
}

model Answer {
  id              Int       @id @default(autoincrement())
  title           String    @default("")
  testId      Int
  test        Test  @relation(fields: [testId], references: [id], onDelete: Cascade)
  correctAnswerOf Test? @relation("CorrectAnswer")
}

enum TypeContent {
  Lecture
  Test
  Correlate
}

enum TypeTest {
  Many
  One
}


// model Question {
//   id                Int      @id @default(autoincrement())
//   title             String   @default("")
//   testId            Int      
//   test              Test     @relation(fields: [testId], references: [id])
//   answers           Answer[]
//   correctAnswerId   Int?      @unique
//   correctAnswer     Answer?   @relation("CorrectAnswer", fields: [correctAnswerId], references: [id], onDelete: Cascade)
// }